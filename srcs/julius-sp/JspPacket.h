#ifndef _JSP_PACKET_H_
#define _JSP_PACKET_H_

#include <stdio.h>
#include "CommDataType.h"

using namespace std;

namespace Jsp
{
	// ----------------------------------------------------
	// ----------------------------------------------------
	class Packet
	{
	public:
		// ----------------------------------------------------
		///
		// ----------------------------------------------------
		Packet(int initBufLen);

		// ----------------------------------------------------
		// ----------------------------------------------------
		~Packet();

		// ----------------------------------------------------
		///
		///
		// ----------------------------------------------------
		bool resize(int newBufLen);

		// ----------------------------------------------------
		// ----------------------------------------------------
		void push(char *p, int len);

		// ----------------------------------------------------
		///
		// ----------------------------------------------------
		CommDataType getType();

		// ----------------------------------------------------
		///
		// ----------------------------------------------------
		char *getData() { return m_pData; }

		// ----------------------------------------------------
		///
		// ----------------------------------------------------
		int getLength() { return m_capacity; }

		// ----------------------------------------------------
		///
		///
		// ----------------------------------------------------
		void writeToFile(const char *fname, bool bAppend);

		static const unsigned short HEAD_MARK;
		static const unsigned short PACKET_SIZE;
		static const unsigned short DATA_TYPE;
		static const unsigned short TAIL_MARK;
		static const int HEAD_SIZE_LEN;
		static const int HEAD_SIZE_TYPE_LEN;
		static const int TAIL_LEN;

	protected:
		char *m_pData;
//		int m_len;
		int m_capacity;

		// ----------------------------------------------------
		///
		///
		// ----------------------------------------------------
		bool allocMemory(int len);

		// ----------------------------------------------------
		///
		///
		// ----------------------------------------------------
		bool reallocMemory(int newLen);

		// ----------------------------------------------------
		// ----------------------------------------------------
		void freeMemory();
	};
};

#endif

